<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html lang="en-US" xml:lang="en-US" xmlns="http://www.w3.org/1999/xhtml"><head><title>XPath, XQuery, and XSLT Function Reference</title> <link rel="shortcut icon" href="../favicon.ico" type="image/x-icon" /><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" /><script src="../../1.2.3.4/bmi-int-js/bmi.js" language="javascript"></script><meta name="Description" content="Free HTML XHTML CSS JavaScript DHTML XML DOM XSL XSLT RSS AJAX ASP ADO PHP SQL tutorials, references, examples for web building." /><meta http-equiv="pragma" content="no-cache" /><meta http-equiv="cache-control" content="no-cache" /><meta http-equiv="expires" content="-1" /><!--ipt type="text/javascript">var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</scri--> <script type="text/javascript">function searchfield_focus(obj)
{
obj.style.color=""
obj.style.fontStyle=""
if (obj.value=="Search w3schools.com")
	{
	obj.value=""
	}
}

var pageTracker = _gat._getTracker("UA-3855518-1");
pageTracker._initData();
pageTracker._trackPageview();
</script> <!--[if gt IE 7]><style>
body
{
overflow-y:scroll;
}
</style> <![endif]--></head><body><p>From <b>http://www.w3schools.com</b> (Copyright Refsnes Data)</p><h1>XPath, XQuery, and XSLT <span class="color_h1">Functions</span></h1><table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0"><tr><td class="prev"><a class="chapter" href="xpath_summary.asp">&laquo; Previous</a></td><td class="next"><a class="chapter" href="default.asp">Next Chapter &raquo;</a></td></tr></table><hr /><p class="intro">The following reference library defines the functions required for XPath 2.0, XQuery 1.0 and XSLT 2.0.</p><hr /><h1>Functions Reference</h1><table border="0"><tr><td valign="top"><ul><li><a href="#accessor">Accessor</a></li> <li><a href="#error">Error and Trace</a></li> <li><a href="#numeric">Numeric</a></li> <li><a href="#string">String</a></li></ul></td><td valign="top"><ul><li><a href="#anyuri">AnyURI</a></li> <li><a href="#boolean">Boolean</a></li> <li><a href="#datetime">Duration/Date/Time</a></li> <li><a href="#qname">QName</a></li></ul></td><td valign="top"><ul><li><a href="#node">Node</a></li> <li><a href="#sequence">Sequence</a></li> <li><a href="#context">Context</a></li></ul></td></tr></table><p><img src="../sql/lamp.gif" alt="Note" /> The default prefix for the function namespace is fn:</p><p><img src="../sql/lamp.gif" alt="Note" /> The URI of the function namespace is: http://www.w3.org/2005/xpath-functions</p><h3><a name="accessor">Accessor Functions</a></h3><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:node-name(<i>node</i>)</td><td valign="top">Returns the node-name of the argument node</td></tr><tr><td valign="top">fn:nilled(<i>node</i>)</td><td valign="top">Returns a Boolean value indicating whether the argument node is nilled</td></tr><tr><td valign="top">fn:data(<i>item.item,...</i>)</td><td valign="top">Takes a sequence of items and returns a sequence of atomic values</td></tr><tr><td valign="top">fn:base-uri()<br />fn:base-uri(<i>node</i>)</td><td valign="top">Returns the value of the base-uri property of the current or specified node</td></tr><tr><td valign="top">fn:document-uri(<i>node</i>)</td><td valign="top">Returns the value of the document-uri property for the specified node</td></tr></table><h3><a name="error">Error and Trace Functions</a></h3><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:error()<br />fn:error(<i>error</i>)<br />fn:error(<i>error,description</i>)<br />fn:error(<i>error,description,error-object</i>)</td><td valign="top">Example: error(fn:QName('http://example.com/test', 'err:toohigh'), 'Error: Price is too high')<p>Result: Returns http://example.com/test#toohigh and the string &quot;Error: Price is too high&quot; to the external processing environment</td></tr><tr><td valign="top">fn:trace(<i>value,label</i>)</td><td valign="top">Used to debug queries</td></tr></table><h3><a name="numeric">Functions on Numeric Values</a></h3><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:number(<i>arg</i>)</td><td valign="top">Returns the numeric value of the argument. The argument could be a boolean, string, or node-set<p>Example: number('100')<br />Result: 100</td></tr><tr><td valign="top">fn:abs(<i>num</i>)</td><td valign="top">Returns the absolute value of the argument<p>Example: abs(3.14)<br />Result: 3.14</p><p>Example: abs(-3.14)<br />Result: 3.14</td></tr><tr><td valign="top">fn:ceiling(<i>num</i>)</td><td valign="top">Returns the smallest integer that is greater than the number argument<p>Example: ceiling(3.14)<br />Result: 4</td></tr><tr><td valign="top">fn:floor(<i>num</i>)</td><td valign="top">Returns the largest integer that is not greater than the number argument<p>Example: floor(3.14)<br />Result: 3</td></tr><tr><td valign="top">fn:round(<i>num</i>)</td><td valign="top">Rounds the number argument to the nearest integer<p>Example: round(3.14)<br />Result: 3</td></tr><tr><td valign="top">fn:round-half-to-even()</td><td valign="top">Example: round-half-to-even(0.5)<br />Result: 0<p>Example: round-half-to-even(1.5)<br />Result: 2</p><p>Example: round-half-to-even(2.5)<br />Result: 2</p></td></tr></table><h3><a name="string">Functions on Strings</a></h3><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:string(<i>arg</i>)</td><td valign="top">Returns the string value of the argument. The argument could be a number, boolean, or node-set<p>Example: string(314)<br />Result: &quot;314&quot;</td></tr><tr><td valign="top">fn:codepoints-to-string(<i>int,int,...</i>)</td><td valign="top">Returns a string from a sequence of code points<p>Example: codepoints-to-string(84, 104, 233, 114, 232, 115, 101)<br />Result: 'Thérèse'</td></tr><tr><td valign="top">fn:string-to-codepoints(<i>string</i>)</td><td valign="top">Returns a sequence of code points from a string<p>Example: string-to-codepoints(&quot;Thérèse&quot;)<br />Result: 84, 104, 233, 114, 232, 115, 101</td></tr><tr><td valign="top">fn:codepoint-equal(<i>comp1,comp2</i>)</td><td valign="top">Returns true if the value of comp1 is equal to the value of comp2, according to the Unicode code point collation (http://www.w3.org/2005/02/xpath-functions/collation/codepoint), otherwise it returns false</td></tr><tr><td valign="top">fn:compare(<i>comp1,comp2</i>)<br />fn:compare(<i>comp1,comp2,collation</i>)</td><td valign="top">Returns -1 if comp1 is less than comp2, 0 if comp1 is equal to comp2, or 1 if comp1 is greater than comp2 (according to the rules of the collation that is used)<p>Example: compare('ghi', 'ghi')<br />Result: 0</td></tr><tr><td valign="top">fn:concat(<i>string,string,...</i>)</td><td valign="top">Returns the concatenation of the strings<p>Example: concat('XPath ','is ','FUN!')<br />Result: 'XPath is FUN!'</td></tr><tr><td valign="top">fn:string-join(<i>(string,string,...),sep</i>)</td><td valign="top">Returns a string created by concatenating the string arguments and using the sep argument as the separator<p>Example: string-join(('We', 'are', 'having', 'fun!'), ' ')<br />Result: ' We are having fun! '</p><p>Example: string-join(('We', 'are', 'having', 'fun!'))<br />Result: 'Wearehavingfun!'</p><p>Example:string-join((), 'sep')<br />Result: ''</td></tr><tr><td valign="top">fn:substring(<i>string,start,len</i>)<br />fn:substring(<i>string,start</i>)</td><td valign="top">Returns the substring from the start position to the specified length. Index of the first character is 1. If length is omitted it returns the substring from the start position to the end<p>Example: substring('Beatles',1,4)<br />Result: 'Beat'</p><p>Example: substring('Beatles',2)<br />Result: 'eatles'</p></td></tr><tr><td valign="top">fn:string-length(<i>string</i>)<br />fn:string-length()</td><td valign="top">Returns the length of the specified string. If there is no string argument it returns the length of the string value of the current node<p>Example: string-length('Beatles')<br />Result: 7</td></tr><tr><td valign="top">fn:normalize-space(<i>string</i>)<br />fn:normalize-space()</td><td valign="top">Removes leading and trailing spaces from the specified string, and replaces all internal sequences of white space with one and returns the result. If there is no string argument it does the same on the current node<p>Example: normalize-space(' The&nbsp;&nbsp; XML ')<br />Result: 'The XML'</td></tr><tr><td valign="top">fn:normalize-unicode()</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">fn:upper-case(<i>string</i>)</td><td valign="top">Converts the string argument to upper-case<p>Example: upper-case('The XML')<br />Result: 'THE XML'</td></tr><tr><td valign="top">fn:lower-case(<i>string</i>)</td><td valign="top">Converts the string argument to lower-case<p>Example: lower-case('The XML')<br />Result: 'the xml'</td></tr><tr><td valign="top">fn:translate(<i>string1,string2,string3</i>)</td><td valign="top">Converts string1 by replacing the characters in string2 with the characters in string3<p>Example: translate('12:30','30','45')<br />Result: '12:45'</p><p>Example: translate('12:30','03','54')<br />Result: '12:45'</p><p>Example: translate('12:30','0123','abcd')<br />Result: 'bc:da'</p></td></tr><tr><td valign="top">fn:escape-uri(<i>stringURI,esc-res</i>)</td><td valign="top">Example: escape-uri(&quot;http://example.com/test#car&quot;, true())<br />Result: &quot;http%3A%2F%2Fexample.com%2Ftest#car&quot;<p>Example: escape-uri(&quot;http://example.com/test#car&quot;, false())<br />Result: &quot;http://example.com/test#car&quot;</p><p>Example: escape-uri (&quot;http://example.com/~bébé&quot;, false())<br />Result: &quot;http://example.com/~b%C3%A9b%C3%A9&quot;</td></tr><tr><td valign="top">fn:contains(<i>string1,string2</i>)</td><td valign="top">Returns true if string1 contains string2, otherwise it returns false<p>Example: contains('XML','XM')<br />Result: true</td></tr><tr><td valign="top">fn:starts-with(<i>string1,string2</i>)</td><td valign="top">Returns true if string1 starts with string2, otherwise it returns false<p>Example: starts-with('XML','X')<br />Result: true</td></tr><tr><td valign="top">fn:ends-with(<i>string1,string2</i>)</td><td valign="top">Returns true if string1 ends with string2, otherwise it returns false<p>Example: ends-with('XML','X')<br />Result: false</td></tr><tr><td valign="top">fn:substring-before(<i>string1,string2</i>)</td><td valign="top">Returns the start of string1 before string2 occurs in it<p>Example: substring-before('12/10','/')<br />Result: '12'</td></tr><tr><td valign="top">fn:substring-after(<i>string1,string2</i>)</td><td valign="top">Returns the remainder of string1 after string2 occurs in it<p>Example: substring-after('12/10','/')<br />Result: '10'</td></tr><tr><td valign="top">fn:matches(<i>string,pattern</i>)</td><td valign="top">Returns true if the string argument matches the pattern, otherwise, it returns false<p>Example: matches(&quot;Merano&quot;, &quot;ran&quot;)<br />Result: true</td></tr><tr><td valign="top">fn:replace(<i>string,pattern,replace</i>)</td><td valign="top">Returns a string that is created by replacing the given pattern with the replace argument<p>Example: replace(&quot;Bella Italia&quot;, &quot;l&quot;, &quot;*&quot;)<br />Result: 'Be**a Ita*ia'</p>Example: replace(&quot;Bella Italia&quot;, &quot;l&quot;, &quot;&quot;)<br />Result: 'Bea Itaia'</td></tr><tr><td valign="top">fn:tokenize(<i>string,pattern</i>)</td><td valign="top">Example: tokenize(&quot;XPath is fun&quot;, &quot;\s+&quot;)<br />Result: (&quot;XPath&quot;, &quot;is&quot;, &quot;fun&quot;)</td></tr></table><h3><a name="anyuri">Functions for anyURI</a></h3><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:resolve-uri(<i>relative,base</i>)</td><td valign="top">&nbsp;</td></tr></table><h3><a name="boolean">Functions on Boolean Values</a></h3><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:boolean(<i>arg</i>)</td><td valign="top">Returns a boolean value for a number, string, or node-set</td></tr><tr><td valign="top">fn:not(<i>arg</i>)</td><td valign="top">The argument is first reduced to a boolean value by applying the boolean() function. Returns true if the boolean value is false, and false if the boolean value is true<p>Example: not(true())<br />Result: false</td></tr><tr><td valign="top">fn:true()</td><td valign="top">Returns the boolean value true<p>Example: true()<br />Result: true</td></tr><tr><td valign="top">fn:false()</td><td valign="top">Returns the boolean value false<p>Example: false()<br />Result: false</td></tr></table><h3><a name="datetime">Functions on Durations, Dates and Times</a></h3><p>Component Extraction Functions on Durations, Dates and Times</p><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:dateTime(<i>date,time</i>)</td><td valign="top">Converts the arguments to a date and a time</td></tr><tr><td valign="top">fn:years-from-duration(<i>datetimedur</i>)</td><td valign="top">Returns an integer that represents the years component in the canonical lexical representation of the value of the argument</td></tr><tr><td valign="top">fn:months-from-duration(<i>datetimedur</i>)</td><td valign="top">Returns an integer that represents the months component in the canonical lexical representation of the value of the argument</td></tr><tr><td valign="top">fn:days-from-duration(<i>datetimedur</i>)</td><td valign="top">Returns an integer that represents the days component in the canonical lexical representation of the value of the argument</td></tr><tr><td valign="top">fn:hours-from-duration(<i>datetimedur</i>)</td><td valign="top">Returns an integer that represents the hours component in the canonical lexical representation of the value of the argument</td></tr><tr><td valign="top">fn:minutes-from-duration(<i>datetimedur</i>)</td><td valign="top">Returns an integer that represents the minutes component in the canonical lexical representation of the value of the argument</td></tr><tr><td valign="top">fn:seconds-from-duration(<i>datetimedur</i>)</td><td valign="top">Returns a decimal that represents the seconds component in the canonical lexical representation of the value of the argument</td></tr><tr><td valign="top">fn:year-from-dateTime(<i>datetime</i>)</td><td valign="top">Returns an integer that represents the year component in the localized value of the argument<p>Example: year-from-dateTime(xs:dateTime(&quot;2005-01-10T12:30-04:10&quot;))<br />Result: 2005</td></tr><tr><td valign="top">fn:month-from-dateTime(<i>datetime</i>)</td><td valign="top">Returns an integer that represents the month component in the localized value of the argument<p>Example: month-from-dateTime(xs:dateTime(&quot;2005-01-10T12:30-04:10&quot;))<br />Result: 01</td></tr><tr><td valign="top">fn:day-from-dateTime(<i>datetime</i>)</td><td valign="top">Returns an integer that represents the day component in the localized value of the argument<p>Example: day-from-dateTime(xs:dateTime(&quot;2005-01-10T12:30-04:10&quot;))<br />Result: 10</td></tr><tr><td valign="top">fn:hours-from-dateTime(<i>datetime</i>)</td><td valign="top">Returns an integer that represents the hours component in the localized value of the argument<p>Example: hours-from-dateTime(xs:dateTime(&quot;2005-01-10T12:30-04:10&quot;))<br />Result: 12</td></tr><tr><td valign="top">fn:minutes-from-dateTime(<i>datetime</i>)</td><td valign="top">Returns an integer that represents the minutes component in the localized value of the argument<p>Example: minutes-from-dateTime(xs:dateTime(&quot;2005-01-10T12:30-04:10&quot;))<br />Result: 30</td></tr><tr><td valign="top">fn:seconds-from-dateTime(<i>datetime</i>)</td><td valign="top">Returns a decimal that represents the seconds component in the localized value of the argument<p>Example: seconds-from-dateTime(xs:dateTime(&quot;2005-01-10T12:30:00-04:10&quot;))<br />Result: 0</td></tr><tr><td valign="top">fn:timezone-from-dateTime(<i>datetime</i>)</td><td valign="top">Returns the time zone component of the argument if any</td></tr><tr><td valign="top">fn:year-from-date(<i>date</i>)</td><td valign="top">Returns an integer that represents the year in the localized value of the argument<p>Example: year-from-date(xs:date(&quot;2005-04-23&quot;))<br />Result: 2005</td></tr><tr><td valign="top">fn:month-from-date(<i>date</i>)</td><td valign="top">Returns an integer that represents the month in the localized value of the argument<p>Example: month-from-date(xs:date(&quot;2005-04-23&quot;))<br />Result: 4</td></tr><tr><td valign="top">fn:day-from-date(<i>date</i>)</td><td valign="top">Returns an integer that represents the day in the localized value of the argument<p>Example: day-from-date(xs:date(&quot;2005-04-23&quot;))<br />Result: 23</td></tr><tr><td valign="top">fn:timezone-from-date(<i>date</i>)</td><td valign="top">Returns the time zone component of the argument if any</td></tr><tr><td valign="top">fn:hours-from-time(<i>time</i>)</td><td valign="top">Returns an integer that represents the hours component in the localized value of the argument<p>Example: hours-from-time(xs:time(&quot;10:22:00&quot;))<br />Result: 10</td></tr><tr><td valign="top">fn:minutes-from-time(<i>time</i>)</td><td valign="top">Returns an integer that represents the minutes component in the localized value of the argument<p>Example: minutes-from-time(xs:time(&quot;10:22:00&quot;))<br />Result: 22</td></tr><tr><td valign="top">fn:seconds-from-time(<i>time</i>)</td><td valign="top">Returns an integer that represents the seconds component in the localized value of the argument<p>Example: seconds-from-time(xs:time(&quot;10:22:00&quot;))<br />Result: 0</td></tr><tr><td valign="top">fn:timezone-from-time(<i>time</i>)</td><td valign="top">Returns the time zone component of the argument if any</td></tr><tr><td valign="top">fn:adjust-dateTime-to-timezone(<i>datetime,timezone</i>)</td><td valign="top">If the timezone argument is empty, it returns a dateTime without a timezone. Otherwise, it returns a dateTime with a timezone</td></tr><tr><td valign="top">fn:adjust-date-to-timezone(<i>date</i><i>,timezone</i>)</td><td valign="top">If the timezone argument is empty, it returns a date without a timezone. Otherwise, it returns a date with a timezone</td></tr><tr><td valign="top">fn:adjust-time-to-timezone(<i>time</i><i>,timezone</i>)</td><td valign="top">If the timezone argument is empty, it returns a time without a timezone. Otherwise, it returns a time with a timezone</td></tr></table><h3><a name="qname">Functions Related to QNames</a></h3><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:QName()</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">fn:local-name-from-QName()</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">fn:namespace-uri-from-QName()</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">fn:namespace-uri-for-prefix()</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">fn:in-scope-prefixes()</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">fn:resolve-QName()</td><td valign="top">&nbsp;</td></tr></table><h3><a name="node">Functions on Nodes</a></h3><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:name()<br />fn:name(<i>nodeset</i>)</td><td valign="top">Returns the name of the current node or the first node in the specified node set</td></tr><tr><td valign="top">fn:local-name()<br />fn:local-name(<i>nodeset</i>)</td><td valign="top">Returns the name of the current node or the first node in the specified node set - without the namespace prefix</td></tr><tr><td valign="top">fn:namespace-uri()<br />fn:namespace-uri(<i>nodeset</i>)</td><td valign="top">Returns the namespace URI of the current node or the first node in the specified node set</td></tr><tr><td valign="top">fn:lang(<i>lang</i>)</td><td valign="top">Returns true if the language of the current node matches the language of the specified language<p>Example: Lang(&quot;en&quot;) is true for<br />&lt;p xml:lang=&quot;en&quot;&gt;...&lt;/p&gt;</p><p>Example: Lang(&quot;de&quot;) is false for<br />&lt;p xml:lang=&quot;en&quot;&gt;...&lt;/p&gt;</td></tr><tr><td valign="top">fn:root()<br />fn:root(<i>node</i>)</td><td valign="top">Returns the root of the tree to which the current node or the specified belongs. This will usually be a document node</td></tr></table><h3><a name="sequence">Functions on Sequences</a></h3><p>General Functions on Sequences</p><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:index-of(<i>(item,item,...),searchitem</i>)</td><td valign="top">Returns the positions within the sequence of items that are equal to the searchitem argument<p>Example: index-of ((15, 40, 25, 40, 10), 40)<br />Result: (2, 4)</p><p>Example: index-of ((&quot;a&quot;, &quot;dog&quot;, &quot;and&quot;, &quot;a&quot;, &quot;duck&quot;), &quot;a&quot;)<br />Result (1, 4)</p><p>Example: index-of ((15, 40, 25, 40, 10), 18)<br />Result: ()</td></tr><tr><td valign="top">fn:remove(<i>(item,item,...),position</i>)</td><td valign="top">Returns a new sequence constructed from the value of the item arguments - with the item specified by the position argument removed<p>Example: remove((&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;), 0)<br />Result: (&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;)</p><p>Example: remove((&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;), 1)<br />Result: (&quot;cd&quot;, &quot;ef&quot;)</p><p>Example: remove((&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;), 4)<br />Result: (&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;)</td></tr><tr><td valign="top">fn:empty(<i>item,item,...</i>)</td><td valign="top">Returns true if the value of the arguments IS an empty sequence, otherwise it returns false<p>Example: empty(remove((&quot;ab&quot;, &quot;cd&quot;), 1))<br />Result: false</td></tr><tr><td valign="top">fn:exists(<i>item,item,...</i>)</td><td valign="top">Returns true if the value of the arguments IS NOT an empty sequence, otherwise it returns false<p>Example: exists(remove((&quot;ab&quot;), 1))<br />Result: false</td></tr><tr><td valign="top">fn:distinct-values(<i>(item,item,...),collation</i>)</td><td valign="top">Returns only distinct (different) values<p>Example: distinct-values((1, 2, 3, 1, 2))<br />Result: (1, 2, 3)</td></tr><tr><td valign="top">fn:insert-before(<i>(item,item,...),pos,inserts</i>)</td><td valign="top">Returns a new sequence constructed from the value of the item arguments - with the value of the inserts argument inserted in the position specified by the pos argument<p>Example: insert-before((&quot;ab&quot;, &quot;cd&quot;), 0, &quot;gh&quot;)<br />Result: (&quot;gh&quot;, &quot;ab&quot;, &quot;cd&quot;)</p><p>Example: insert-before((&quot;ab&quot;, &quot;cd&quot;), 1, &quot;gh&quot;)<br />Result: (&quot;gh&quot;, &quot;ab&quot;, &quot;cd&quot;)</p><p>Example: insert-before((&quot;ab&quot;, &quot;cd&quot;), 2, &quot;gh&quot;)<br />Result: (&quot;ab&quot;, &quot;gh&quot;, &quot;cd&quot;)</p><p>Example: insert-before((&quot;ab&quot;, &quot;cd&quot;), 5, &quot;gh&quot;)<br />Result: (&quot;ab&quot;, &quot;cd&quot;, &quot;gh&quot;)</td></tr><tr><td valign="top">fn:reverse(<i>(item,item,...)</i>)</td><td valign="top">Returns the reversed order of the items specified<p>Example: reverse((&quot;ab&quot;, &quot;cd&quot;, &quot;ef&quot;))<br />Result: (&quot;ef&quot;, &quot;cd&quot;, &quot;ab&quot;)</p><p>Example: reverse((&quot;ab&quot;))<br />Result: (&quot;ab&quot;)</td></tr><tr><td valign="top">fn:subsequence(<i>(item,item,...),start,len</i>)</td><td valign="top">Returns a sequence of items from the position specified by the start argument and continuing for the number of items specified by the len argument. The first item is located at position 1<p>Example: subsequence(($item1, $item2, $item3,...), 3)<br />Result: ($item3, ...)</p><p>Example: subsequence(($item1, $item2, $item3, ...), 2, 2)<br />Result: ($item2, $item3)</td></tr><tr><td valign="top">fn:unordered(<i>(item,item,...)</i>)</td><td valign="top">Returns the items in an implementation dependent order</td></tr></table><p>Functions That Test the Cardinality of Sequences</p><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:zero-or-one(<i>item,item,...</i>)</td><td valign="top">Returns the argument if it contains zero or one items, otherwise it raises an error</td></tr><tr><td valign="top">fn:one-or-more(<i>item,item,...</i>)</td><td valign="top">Returns the argument if it contains one or more items, otherwise it raises an error</td></tr><tr><td valign="top">fn:exactly-one(<i>item,item,...</i>)</td><td valign="top">Returns the argument if it contains exactly one item, otherwise it raises an error</td></tr></table><p>Equals, Union, Intersection and Except</p><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:deep-equal(<i>param1,param2,collation</i>)</td><td valign="top">Returns true if param1 and param2 are deep-equal to each other, otherwise it returns false</td></tr></table><p>Aggregate Functions</p><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:count(<i>(item,item,...)</i>)</td><td valign="top">Returns the count of nodes</td></tr><tr><td valign="top">fn:avg(<i>(arg,arg,...)</i>)</td><td valign="top">Returns the average of the argument values<p>Example: avg((1,2,3))<br />Result: 2</td></tr><tr><td valign="top">fn:max(<i>(arg,arg,...)</i>)</td><td valign="top">Returns the argument that is greater than the others<p>Example: max((1,2,3))<br />Result: 3</p><p>Example: max(('a', 'k'))<br />Result: 'k'</td></tr><tr><td valign="top">fn:min(<i>(arg,arg,...)</i>)</td><td valign="top">Returns the argument that is less than the others<p>Example: min((1,2,3))<br />Result: 1</p><p>Example: min(('a', 'k'))<br />Result: 'a'</td></tr><tr><td valign="top">fn:sum(<i>arg,arg,...</i>)</td><td valign="top">Returns the sum of the numeric value of each node in the specified node-set</td></tr></table><p>Functions that Generate Sequences</p><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:id(<i>(string,string,...),node</i>)</td><td valign="top">Returns a sequence of element nodes that have an ID value equal to the value of one or more of the values specified in the string argument</td></tr><tr><td valign="top">fn:idref(<i>(string,string,...),node</i>)</td><td valign="top">Returns a sequence of element or attribute nodes that have an IDREF value equal to the value of one or more of the values specified in the string argument</td></tr><tr><td valign="top">fn:doc(<i>URI</i>)</td><td valign="top">&nbsp;</td></tr><tr><td valign="top">fn:doc-available(<i>URI</i>)</td><td valign="top">Returns true if the doc() function returns a document node, otherwise it returns false</td></tr><tr><td valign="top">fn:collection()<br />fn:collection(<i>string</i>)</td><td valign="top">&nbsp;</td></tr></table><h3><a name="context">Context Functions</a></h3><table class="reference" cellspacing="0" cellpadding="0" border="1" width="100%"><tr><th width="45%" valign="top" align="left">Name</th><th width="55%" valign="top" align="left">Description</th></tr><tr><td valign="top">fn:position()</td><td valign="top">Returns the index position of the node that is currently being processed<p>Example: //book[position()&lt;=3]<br />Result: Selects the first three book elements</td></tr><tr><td valign="top">fn:last()</td><td valign="top">Returns the number of items in the processed node list<p>Example: //book[last()]<br />Result: Selects the last book element</td></tr><tr><td valign="top">fn:current-dateTime()</td><td valign="top">Returns the current dateTime (with timezone)</td></tr><tr><td valign="top">fn:current-date()</td><td valign="top">Returns the current date (with timezone)</td></tr><tr><td valign="top">fn:current-time()</td><td valign="top">Returns the current time (with timezone)</td></tr><tr><td valign="top">fn:implicit-timezone()</td><td valign="top">Returns the value of the implicit timezone</td></tr><tr><td valign="top">fn:default-collation()</td><td valign="top">Returns the value of the default collation</td></tr><tr><td valign="top">fn:static-base-uri()</td><td valign="top">Returns the value of the base-uri</td></tr></table><br /><table class="chapter" border="0" width="100%" cellspacing="0" cellpadding="0"><tr><td class="prev"><a class="chapter" href="xpath_summary.asp">&laquo; Previous</a></td><td class="next"><a class="chapter" href="default.asp">Next Chapter &raquo;</a></td></tr></table><p>From <b>http://www.w3schools.com</b> (Copyright Refsnes Data)</p></body></html><script language="javascript"><!--bmi_SafeAddOnload(bmi_load,"bmi_orig_img",0);//-->
</script>